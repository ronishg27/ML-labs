# -*- coding: utf-8 -*-
"""mcp-neuron-gates.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IdSzRFXATZhF00O-JCPXeba_FflIgWUr
"""

import itertools

class MCPNeuron:
    def __init__(self, weights, threshold):
        self.weights = weights
        self.threshold = threshold

    def activate(self, inputs):
        # Calculate the weighted sum of inputs
        weighted_sum = sum(w * i for w, i in zip(self.weights, inputs))

        # Apply the threshold function
        return 1 if weighted_sum >= self.threshold else 0

    def generate_truth_table(self):
        # Number of inputs
        num_inputs = len(self.weights)

        # Generate all possible input combinations (truth table)
        truth_table = list(itertools.product([0, 1], repeat=num_inputs))

        # Print the truth table
        print("Inputs -> Output")
        for inputs in truth_table:
            output = self.activate(inputs)
            print(f"{inputs} -> {output}")

# Define weights and threshold for an AND gate
and_neuron = MCPNeuron(weights=[1, 1], threshold=2)

# Generate and print the truth table for the AND gate
and_neuron.generate_truth_table()

or_neuron = MCPNeuron(weights=[1, 1], threshold=1)
or_neuron.generate_truth_table()

not_neuron = MCPNeuron(weights=[-1], threshold=0)
not_neuron.generate_truth_table()

nand_neuron = MCPNeuron(weights=[-1, -1], threshold=-1)
nand_neuron.generate_truth_table()



